import twilio from 'twilio';

const accountSid = process.env.TWILIO_ACCOUNT_SID;
const authToken = process.env.TWILIO_AUTH_TOKEN;
const whatsappNumber = process.env.TWILIO_WHATSAPP_NUMBER || 'whatsapp:+14155238886';

let client: twilio.Twilio | null = null;

if (accountSid && authToken) {
  client = twilio(accountSid, authToken);
  console.log('‚úÖ Twilio WhatsApp configurado com sucesso');
} else {
  console.log('‚ö†Ô∏è  Twilio WhatsApp n√£o configurado - vari√°veis de ambiente ausentes');
}

interface WhatsAppNotification {
  to: string;
  clientName: string;
  serviceName: string;
  appointmentDate: string;
  appointmentTime: string;
  status: 'confirmed' | 'cancelled';
}

export async function sendAppointmentNotification(notification: WhatsAppNotification): Promise<boolean> {
  if (!client) {
    console.log('‚ö†Ô∏è  Twilio n√£o configurado - notifica√ß√£o WhatsApp n√£o enviada');
    return false;
  }

  try {
    const toNumber = `whatsapp:${notification.to}`;
    let message: string;
    
    if (notification.status === 'confirmed') {
      message = `üéâ *Agendamento Confirmado!*

Ol√° ${notification.clientName}! 

Seu agendamento foi confirmado com sucesso:

üìÖ *Servi√ßo:* ${notification.serviceName}
üìÖ *Data:* ${notification.appointmentDate}
‚è∞ *Hor√°rio:* ${notification.appointmentTime}

Aguardamos voc√™ no nosso sal√£o! üíÖ‚ú®

_Para qualquer d√∫vida, entre em contato conosco._`;
    } else {
      message = `‚ùå *Agendamento Cancelado*

Ol√° ${notification.clientName},

Infelizmente seu agendamento foi cancelado:

üìÖ *Servi√ßo:* ${notification.serviceName}
üìÖ *Data:* ${notification.appointmentDate}
‚è∞ *Hor√°rio:* ${notification.appointmentTime}

Entre em contato para reagendar! üìû

_Sentimos muito pelo inconveniente._`;
    }

    const result = await client.messages.create({
      from: whatsappNumber,
      to: toNumber,
      body: message
    });

    console.log(`‚úÖ WhatsApp enviado para ${notification.clientName}: ${result.sid}`);
    return true;

  } catch (error: any) {
    console.error('‚ùå Erro ao enviar WhatsApp:', error.message);
    if (error.code) console.error(`C√≥digo do erro: ${error.code}`);
    if (error.moreInfo) console.error(`Mais informa√ß√µes: ${error.moreInfo}`);
    return false;
  }
}

export async function testWhatsAppConnection(): Promise<{ success: boolean; message: string }> {
  if (!client) {
    return {
      success: false,
      message: 'Twilio n√£o configurado. Adicione TWILIO_ACCOUNT_SID e TWILIO_AUTH_TOKEN nas vari√°veis de ambiente.'
    };
  }

  try {
    const account = await client.api.accounts(accountSid).fetch();
    return {
      success: true,
      message: `Conex√£o Twilio OK. Conta: ${account.friendlyName}`
    };
  } catch (error: any) {
    return {
      success: false,
      message: `Erro na conex√£o Twilio: ${error.message}`
    };
  }
}

export { client as twilioClient };