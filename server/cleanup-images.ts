import { storage } from "./storage";
import fs from "fs";
import path from "path";
import { seedDefaultImages } from "./seed-default-images";

export async function cleanupBrokenImageReferences() {
  console.log("üîí Limpeza autom√°tica DESABILITADA para preservar imagens personalizadas");
  console.log("üì∏ Suas imagens est√£o protegidas e n√£o ser√£o removidas automaticamente");
  
  // LIMPEZA COMPLETAMENTE DESABILITADA PARA PROTEGER IMAGENS DO USU√ÅRIO
  // S√≥ executar verifica√ß√£o sem modificar nada
  try {
    const services = await storage.getServices();
    console.log(`üìä Status atual: ${services.length} servi√ßos encontrados`);
    
    for (const service of services) {
      if (service.imageUrl && service.imageUrl.startsWith('/uploads/')) {
        const imagePath = path.join(process.cwd(), service.imageUrl);
        if (!fs.existsSync(imagePath)) {
          console.log(`‚ö†Ô∏è  Imagem n√£o encontrada (mas preservada no banco): ${service.imageUrl} (Servi√ßo: ${service.name})`);
        } else {
          console.log(`‚úÖ Imagem v√°lida: ${service.imageUrl} (Servi√ßo: ${service.name})`);
        }
      }
    }
    
    const banner = await storage.getBanner();
    if (banner?.backgroundImage && banner.backgroundImage.startsWith('/uploads/')) {
      const imagePath = path.join(process.cwd(), banner.backgroundImage);
      if (!fs.existsSync(imagePath)) {
        console.log(`‚ö†Ô∏è  Imagem do banner n√£o encontrada (mas preservada no banco): ${banner.backgroundImage}`);
      } else {
        console.log(`‚úÖ Imagem do banner v√°lida: ${banner.backgroundImage}`);
      }
    }
    
    console.log("üîí Verifica√ß√£o conclu√≠da SEM MODIFICA√á√ïES - imagens preservadas");
    
  } catch (error) {
    console.error("‚ùå Erro durante verifica√ß√£o de imagens:", error);
  }
}