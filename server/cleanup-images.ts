import { storage } from "./storage";
import fs from "fs";
import path from "path";
import { seedDefaultImages } from "./seed-default-images";

export async function cleanupBrokenImageReferences() {
  console.log("üßπ Iniciando limpeza de refer√™ncias de imagens quebradas...");
  
  try {
    // Verificar servi√ßos com imagens
    const services = await storage.getServices();
    let cleanedServices = 0;
    
    for (const service of services) {
      if (service.imageUrl && service.imageUrl.startsWith('/uploads/')) {
        const imagePath = path.join(process.cwd(), service.imageUrl);
        if (!fs.existsSync(imagePath)) {
          console.log(`‚ùå Removendo refer√™ncia quebrada: ${service.imageUrl} (Servi√ßo: ${service.name})`);
          await storage.updateServiceImage(service.id, null);
          cleanedServices++;
        } else {
          console.log(`‚úÖ Imagem v√°lida: ${service.imageUrl} (Servi√ßo: ${service.name})`);
        }
      }
    }
    
    // Verificar banner
    const banner = await storage.getBanner();
    let cleanedBanners = 0;
    
    if (banner?.backgroundImage && banner.backgroundImage.startsWith('/uploads/')) {
      const imagePath = path.join(process.cwd(), banner.backgroundImage);
      if (!fs.existsSync(imagePath)) {
        console.log(`‚ùå Removendo refer√™ncia quebrada do banner: ${banner.backgroundImage}`);
        await storage.updateBannerImage(null);
        cleanedBanners++;
      } else {
        console.log(`‚úÖ Imagem do banner v√°lida: ${banner.backgroundImage}`);
      }
    }
    
    console.log(`üßπ Limpeza conclu√≠da: ${cleanedServices} servi√ßos e ${cleanedBanners} banners corrigidos`);
    
    // Ap√≥s limpeza, configurar imagens padr√£o se necess√°rio
    await seedDefaultImages();
    
  } catch (error) {
    console.error("‚ùå Erro durante limpeza de imagens:", error);
  }
}